let mapleader=","

" === Plugins ===
set easymotion
set NERDTree
set surround
set multiple-cursors
set commentary
set argtextobj
set textobj-entire
set ReplaceWithRegister
set exchange
set highlightedyank
set vim-paragraph-motion
set indent-object
set matchit
" IdeaVimExtension plugin
set keep-english-in-normal-and-restore-in-insert

" === Action ===
nmap ]e <Action>(GotoNextError)
nmap [e <Action>(GotoPreviousError)
map K <Action>(QuickJavaDoc)
map gi <Action>(GotoImplementation)
map gr <Action>(FindUsages)
nmap <c-p> <Action>(SearchEverywhere)

" === Leader ===
noremap \ ,

" Choose Window using Switcher
map <Leader>wc <Action>(Switcher)

" Hide tool window
map <Leader>zz <Action>(HideActiveWindow)

" NERDTree
nmap <leader>e :NERDTreeToggle<CR>

" ReplaceWithRegister
nmap <Leader>p  <Plug>ReplaceWithRegisterOperator
nmap <Leader>pp <Plug>ReplaceWithRegisterLine
xmap <Leader>p  <Plug>ReplaceWithRegisterVisual

" Generate
map <Leader>ge <Action>(Generate)

" <alt-enter>(quick fix)
map <Leader>qf <Action>(ShowIntentionActions)

" SurroundWith(Wrap)
map <Leader>wr <Action>(SurroundWith)

" git
map <Leader>gg <Action>(Git.Menu)

" not working
" map [g :action NextDiff<CR>
" map ]g :action PreviousDiff<CR>

" show
" #tip <C-S-I> show QuickImplementations in completion menu
map <Leader>se <Action>(ShowErrorDescription)
map <Leader>si <Action>(QuickImplementations)
map <Leader>sr <Action>(ShowUsages)

" tags
map <Leader>t <Action>(FileStructurePopup)

" Refactor
map <Leader>rr <Action>(RefactoringMenu)
map <Leader>rn <Action>(RenameElement)

" Refactor
map <Leader>rf <Action>(ReformatCode)

" The default C-o and C-i behaviours have certain inconsistencies with
" Vim which I can't quite pinpoint.
" I'm using the default IntelliJ behaviours instead.
map <C-o> <Action>(Back)
map <C-i> <Action>(Forward)

" === Search ===
set ignorecase
set smartcase
set hlsearch
set incsearch

" === Miscellaneous ===
set visualbell
set noerrorbells
set clipboard+=unnamed
nmap <C-h> gT
nmap <C-l> gt
set backspace=indent,eol,start
set hidden
set showcmd
" Always show the status line at the bottom, even if you only have one window open.
set laststatus=2
set wildmenu
set wildmode=full
set history=200
syntax on
set shortmess+=I
set number
set relativenumber
set mouse+=a
source $VIMRUNTIME/mswin.vim
set clipboard=unnamed
set splitbelow
set splitrigh

" Unbind some useless/annoying default key bindings.
nmap Q <Nop> " 'Q' in normal mode enters Ex mode. You almost never want this.
map <C-a> <Nop>
map <C-x> <Nop>

" Completion popup menu
inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<C-j>"
inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<C-k>"

" Moving lines
nnoremap <silent> <C-k> :move-2<cr>
nnoremap <silent> <C-j> :move+<cr>
xnoremap <silent> <C-k> :move-2<cr>gv
xnoremap <silent> <C-j> :move'>+<cr>gv

set showcmd             " show command in bottom bar

" === Plugins ===
map <Space> <Plug>(easymotion-prefix)
let g:EasyMotion_keys = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ;'
map <space>l <Plug>(easymotion-f2)
map <space>h <Plug>(easymotion-F2)
let g:argtextobj_pairs="[:],(:),<:>"
let g:highlightedyank_highlight_duration = "400"

" === Jetbrains IDE specific settings(not copy from .vimrc) ===
" copy paste cut
vnoremap <C-c> "+y
vnoremap <C-v> "+gP
inoremap <C-v> <C-o>"+gP

" Show a few lines of context around the cursor.  Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=3
" Ask help from nvim ;)
" https://www.reddit.com/r/IntelliJIDEA/comments/dphwrd/how_to_configure_ideavim_shortcut_to_open_file_in/
nmap ,v :action Tool_External Tools_nvim<cr>

" === Idea specific settings ===
set clipboard+=ideaput
set ideajoin
set ideastatusicon=gray
set idearefactormode=keep
" Sync IJ bookmarks and Vim marks
set ideamarks

" tips
" https://github.com/JetBrains/ideavim
" / 搜索乱码: Editor -> Font -> Fallback Font 修改为中文字体
" Press <c-s-i> in completion menu will show methode implementation
" === fold ===
" A fold smaller than 'foldminlines' will always be displayed like it was open.
" Therefore the commands below may work differently on small folds.
"
"                                                         *zo*
" zo              Open one fold under the cursor.  When a count is given, that
"                 many folds deep will be opened.  In Visual mode one level of
"                 folds is opened for all lines in the selected area.
"
"                                                         *zc*
" zc              Close one fold under the cursor.  When a count is given, that
"                 many folds deep are closed.  In Visual mode one level of folds
"                 is closed for all lines in the selected area.
"                 'foldenable' will be set.
"
"                                                         *zM*
" zM              Close all folds: set 'foldlevel' to 0.
"                 'foldenable' will be set.
"
"                                                         *zR*
" zR              Open all folds.  This sets 'foldlevel' to highest fold level.
" zO              like zo, recursively
" zC              like zc, recursively
