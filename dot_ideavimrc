let mapleader=","

" === Plugins ===
set easymotion
set NERDTree
set surround
set multiple-cursors
set commentary
set argtextobj
set textobj-entire
set ReplaceWithRegister
set exchange
set highlightedyank
set vim-paragraph-motion
set indent-object
set matchit
" require IdeaVim-Quickscope plugin installed
set quickscope
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" IdeaVimExtension plugin
set keep-english-in-normal

" https://github.com/TheBlob42/idea-which-key
set which-key
" disable the timeout option
set notimeout

" === Leader ===
noremap \ ,

" === Action ===

" uncategorized action
map <Leader>ac CompileFile

" == Code navigation ==
nmap ]g <Action>(GotoNextError)
nmap [g <Action>(GotoPreviousError)
map K <Action>(QuickJavaDoc)
map gi <Action>(GotoImplementation)
map gs <Action>(GotoSuperMethod)
map gr <Action>(FindUsages)

" IDEA <c-w>
map <c-s> <Action>(EditorSelectWord)
map <c-s-s> <Action>(EditorUnSelectWord)

" == Completion ==
imap <c-k> <Action>(ParameterInfo)

" == Movement ==
map <a-o> <Action>(RecentLocations)
" <a-up> <a-down> MethodUp MethodDown

" == Find ==
nmap <c-p> <Action>(SearchEverywhere)
map <Leader>ff <Action>(GotoFile)
" find tag
map <Leader>ft <Action>(GotoSymbol)
" find action
map <Leader>fa <Action>(GotoAction)
" find class
map <Leader>fc <Action>(GotoClass)

" Choose Window using Switcher
map <Leader>wc <Action>(Switcher)

" Hide tool window
map <Leader>zz <Action>(HideAllWindows)

" NERDTree
nmap <leader>e :NERDTreeToggle<CR>

" ReplaceWithRegister
nmap <Leader>p  <Plug>ReplaceWithRegisterOperator
nmap <Leader>pp <Plug>ReplaceWithRegisterLine
xmap <Leader>p  <Plug>ReplaceWithRegisterVisual

" Generate
map <Leader>ge <Action>(Generate)

" <alt-enter>(quick fix)
map <Leader>qf <Action>(ShowIntentionActions)

" SurroundWith(Wrap)
map <Leader>wr <Action>(SurroundWith)

" git
map <Leader>gg <Action>(Git.Menu)

" not working
" map [g :action NextDiff<CR>
" map ]g :action PreviousDiff<CR>

" == Show ==
" #tip <C-S-I> show QuickImplementations in completion menu

map <Leader>se <Action>(ShowErrorDescription)
map <Leader>si <Action>(QuickImplementations)
" show reference
map <Leader>sr <Action>(ShowUsages)
map <Leader>sd <Action>(ShowUmlDiagramPopup)
" show tags
map <Leader>st <Action>(FileStructurePopup)

" == Toggle ==
" toggle pretty document
map <Leader>tdd <Action>(ToggleRenderedDocPresentation)
map <Leader>tda <Action>(ToggleRenderedDocPresentationForAll)

" == Refactor ==
map <Leader>rr <Action>(RefactoringMenu)
map <Leader>rn <Action>(RenameElement)

" Refactor
map <Leader>rf <Action>(ReformatCode)

" The default C-o and C-i behaviours have certain inconsistencies with
" Vim which I can't quite pinpoint.
" I'm using the default IntelliJ behaviours instead.
map <C-o> <Action>(Back)
map <C-i> <Action>(Forward)


" === Search ===
set ignorecase
set smartcase
set hlsearch
set incsearch

" === Miscellaneous ===
set visualbell
set noerrorbells
set clipboard+=unnamed
nmap <C-h> gT
nmap <C-l> gt
set backspace=indent,eol,start
set hidden
set showcmd
" Always show the status line at the bottom, even if you only have one window open.
set laststatus=2
set wildmenu
set wildmode=full
set history=200
syntax on
set shortmess+=I
set number
set relativenumber
set mouse+=a
source $VIMRUNTIME/mswin.vim
set clipboard=unnamed
set splitbelow
set splitrigh

" Unbind some useless/annoying default key bindings.
nmap Q <Nop> " 'Q' in normal mode enters Ex mode. You almost never want this.
map <C-a> <Nop>
map <C-x> <Nop>

nnoremap H ^
nnoremap L $

" Moving lines
nnoremap <silent> <C-k> :move-2<cr>
nnoremap <silent> <C-j> :move+<cr>
xnoremap <silent> <C-k> :move-2<cr>gv
xnoremap <silent> <C-j> :move'>+<cr>gv

set showcmd             " show command in bottom bar

" === Plugins ===
map <Space> <Plug>(easymotion-prefix)
let g:EasyMotion_keys = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ;'
map <space>l <Plug>(easymotion-f2)
map <space>h <Plug>(easymotion-F2)
let g:argtextobj_pairs="[:],(:),<:>"
let g:highlightedyank_highlight_duration = "400"
" which-key
let g:WhichKey_FontFamily = "Fira Code, JetBrains MoNo"
let g:WhichKey_FontSize = 15
" Translation
map <Leader>trr <Action>($EditorTranslateAction)
map <Leader>trx <Action>($TranslateAndReplaceAction)
" CodeGlance3
map <Leader>tg <Action>(CodeGlance.toggle)

" === Jetbrains IDE specific settings(not copy from .vimrc) ===
" copy paste cut
vnoremap <C-c> "+y
vnoremap <C-v> "+gP
inoremap <C-v> <C-o>"+gp

" Show a few lines of context around the cursor.  Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=3
" Ask help from nvim ;)
" https://www.reddit.com/r/IntelliJIDEA/comments/dphwrd/how_to_configure_ideavim_shortcut_to_open_file_in/
nmap ,v :action Tool_External Tools_nvim<cr>

" === Idea specific settings ===
set clipboard+=ideaput
set ideajoin
set ideastatusicon=gray
set idearefactormode=keep
" Sync IJ bookmarks and Vim marks
set ideamarks

" tips
" ============
" https://github.com/JetBrains/ideavim

" / 搜索乱码: Editor -> Font -> Fallback Font 修改为中文字体

" Press <c-s-i> in completion menu will show method implementation

" Press <c-p> in insert mode will show matching method arguments
" I map <c-k> to <c-p> in insert mode, so that I can use <c-p> like in VIM

" Press <F4> in maven module will go to corresponding source file

" === fold ===
" A fold smaller than 'foldminlines' will always be displayed like it was open.
" Therefore the commands below may work differently on small folds.
"
"                                                         *zo*
" zo              Open one fold under the cursor.  When a count is given, that
"                 many folds deep will be opened.  In Visual mode one level of
"                 folds is opened for all lines in the selected area.
"
"                                                         *zc*
" zc              Close one fold under the cursor.  When a count is given, that
"                 many folds deep are closed.  In Visual mode one level of folds
"                 is closed for all lines in the selected area.
"                 'foldenable' will be set.
"
"                                                         *zM*
" zM              Close all folds: set 'foldlevel' to 0.
"                 'foldenable' will be set.
"
"                                                         *zR*
" zR              Open all folds.  This sets 'foldlevel' to highest fold level.
" zO              like zo, recursively
" zC              like zc, recursively

" downloaded plugins
" ================
" .ignore (4.3.0)
" AceJump (3.8.4)
" Alibaba Java Coding Guidelines (2.1.1)
" CodeGlance3 (2.1.1-2021.1.3)
" Custom Postfix Templates (2.12.1.212)
" File Watchers (212.5080.8)
" Foldable ProjectView (1.1.1)
" Frame Switcher (3.29.0-212)
" GitHub Copilot (1.1.1)
" GitToolBox (212.8.1)
" Grep Console (12.1.211.6086.0)
" IDE Eval Reset (2.3.5)
" IdeaVim (1.8.1)
" IdeaVim-EasyMotion (1.6)
" IdeaVimExtension (1.4.12)
" JPA Buddy (5.9-212)
" Key Promoter X (2021.3)
" Maven Helper (4.18.212.000.3)
" New Relic CodeStream: GitHub, GitLab, PRs and Code Review (12.3.1+210)
" Nord (0.13.0)
" Nyan Progress Bar (1.14)
" POJO to Json (1.1.0)
" Polar (1.0.5)
" Rainbow Brackets (6.21)
" SonarLint (6.3.0.39716)
" String Manipulation (8.22.203.000.1)
" Tabnine AI Code Completion- JS Java Python TS Rust Go PHP & More (0.5.3)
" Translation (3.2.0.1)
" WakaTime (13.1.3)
" Which-Key (0.6)

" leetcode editor
" leetcode.editor.RunCodeAction
" leetcode.editor.SubmitAction
