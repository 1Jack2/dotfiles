"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set nocompatible " VI compatible mode is disabled so that VIM things work

" =============================================================================
"   PLUGINS
" =============================================================================
call plug#begin()

" Search
" Plug 'romainl/vim-cool'               " Disables highlight when search is done
" Plug 'junegunn/vim-slash'			  " improve search highlight and star-search
" Plug 'haya14busa/incsearch.vim'       " Better incremental search
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }  " FZF plugin, makes Ctrl-P unnecessary
Plug 'junegunn/fzf.vim'
Plug 'nelstrom/vim-visual-star-search'							   " visual search

" Movement
" Plug 'justinmk/vim-sneak'           " replaced by vim-easymotion
" Plug 'easymotion/vim-easymotion'
" Plug 'haya14busa/incsearch-easymotion.vim'
Plug 'takac/vim-hardtime'             " Disable arrow keys and similar
Plug 'andymass/vim-matchup'           " Highlight corresponding blocks e.g. if - fi in bash

" Text Manipulation
Plug 'tpope/vim-unimpaired'           " Pairs of mappings
Plug 'tpope/vim-repeat'               " Adds repeat thorugh . to other packages
Plug 'tpope/vim-surround'             " Surround with parentheses & co
Plug 'tpope/vim-commentary'           " To comment stuff out
Plug 'junegunn/vim-easy-align'        " Easier alignment
Plug 'FooSoft/vim-argwrap'            " convert lists of arguments into blocks of arguments

" GUI enhancements
Plug 'itchyny/lightline.vim'          " Better Status Bar
Plug 'mhinz/vim-startify'             " Better start screen
Plug 'preservim/nerdtree'             " File explorer
Plug 'simnalamburt/vim-mundo'         " Gundo fork
Plug 'junegunn/vim-peekaboo'		  " show register content

" Autocomplete
" Semantic language support
" Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Git GUI
Plug 'airblade/vim-gitgutter'         " Git gutter
Plug 'tpope/vim-fugitive'             " Git interface
Plug 'junegunn/gv.vim'                " TIG like navigation for vim
Plug 'xuyuanp/nerdtree-git-plugin'    " Show status of files in NerdTree
Plug 'yggdroot/indentline'            " Shows indentation levels

" Colorschemes
Plug 'junegunn/seoul256.vim'

" Other
Plug 'wakatime/vim-wakatime'           " Wakatime time tracking
Plug 'liuchengxu/vim-which-key'        " show keybindings in popup
Plug 'ludovicchabant/vim-gutentags'	   " manage tag files

call plug#end()

" =============================================================================
"   LEADER
" =============================================================================
let mapleader=","       " leader is ,
noremap	\ ,				" swap , and \
set showcmd             " show command in bottom bar

nnoremap <silent> <leader> :WhichKey ','<CR>
nnoremap <Leader>u :MundoToggle<CR>
nnoremap <Leader>n :NERDTreeToggle<CR>

" fzf
nnoremap <Leader>f :Files<CR>
nnoremap <Leader>b :Buffers<CR>
nnoremap <Leader>g :Rg<CR>
nnoremap <Leader>t :Tags<CR>

" aw    -- ArgWrap
nnoremap <Leader>aw :ArgWrap<CR>

" =============================================================================
"   BASIC
" =============================================================================

" === Cursor ===
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\e[5 q\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\e[2 q\<Esc>\\"
else
    let &t_SI = "\e[5 q"
    let &t_EI = "\e[2 q"
endif

" === Undo ===
if !isdirectory($HOME."/.vim")
    call mkdir($HOME."/.vim", "", 0770)
endif
if !isdirectory($HOME."/.vim/undodir")
	call mkdir($HOME."/.vim/undodir", "", 0700)
endif
set undofile " Maintain undo history between sessions
set undodir=~/.vim/undodir

" === Search ===
set ignorecase
set smartcase
set hlsearch
set incsearch

" === Indentation ===
" Use literal tabs
set softtabstop=4 "Soft tab size
set tabstop=4 " Tab size
set shiftwidth=4 " Visual mode indentation (match tabstop)
set noexpandtab " Don't use spaces

" Inherit indentation from previous line
set autoindent

" === Miscellaneous ===
" encoding
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1

" command complete
set wildmenu
set wildmode=full

" command history
set history=200

" Turn on syntax highlighting.
syntax on

" set default coloscheme https://github.com/junegunn/seoul256.vim
colorscheme seoul256-light

" Disable the default Vim startup message.
set shortmess+=I

set number
set relativenumber

" Always show the status line at the bottom, even if you only have one window open.
set laststatus=2

" The backspace key has slightly unintuitive behavior by default. For example,
" by default, you can't backspace before the insertion point set with 'i'.
" This configuration makes backspace behave more reasonably, in that you can
" backspace over anything.
set backspace=indent,eol,start

" By default, Vim doesn't let you hide a buffer (i.e. have a buffer that isn't
" shown in any window) that has unsaved changes. This is to prevent you from "
" forgetting about unsaved changes and then quitting e.g. via `:qa!`. We find
" hidden buffers helpful enough to disable this protection. See `:help hidden`
" for more information on this.
set hidden

" Unbind some useless/annoying default key bindings.
nmap Q <Nop> " 'Q' in normal mode enters Ex mode. You almost never want this.
map <C-a> <Nop>
map <C-x> <Nop>

" Disable audible bell because it's annoying.
set noerrorbells visualbell t_vb=

" open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" quicker window movement
" nnoremap <C-j> <C-w>j
" nnoremap <C-k> <C-w>k
" nnoremap <C-h> <C-w>h
" nnoremap <C-l> <C-w>l

" Enable mouse support.
set mouse+=a

" Try to prevent bad habits like using the arrow keys for movement.
nnoremap <Left>  :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up>    :echoe "Use k"<CR>
nnoremap <Down>  :echoe "Use j"<CR>
inoremap <Left>  <ESC>:echoe "Use h"<CR>
inoremap <Right> <ESC>:echoe "Use l"<CR>
inoremap <Up>    <ESC>:echoe "Use k"<CR>
inoremap <Down>  <ESC>:echoe "Use j"<CR>

" =============================================================================
"   PLUGIN CONFIG
" =============================================================================

" vim-commentary
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType c,cpp,java setlocal commentstring=//\ %s

" gutentags (borrow from [http://www.skywind.me/blog/archives/2084])
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']

" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags

" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

" fzf
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set rtp+=~/.fzf

" Lightline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" --INSERT-- is unncessary because of lightline
set noshowmode

" Easymotion
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" easymotion
" map <Space> <Plug>(easymotion-prefix)
" Use uppercase target labels and type as a lower case
" let g:EasyMotion_use_upper = 1
" let g:EasyMotion_keys = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ;'
" Turn on case-insensitive feature
" let g:EasyMotion_smartcase = 1
" replace vim-sneak
" nmap s <Plug>(easymotion-overwin-f2)

" incsearch
" map / <Plug>(incsearch-forward)
" map ? <Plug>(incsearch-backward)
" map g/ <Plug>(incsearch-stay)

" incsearch-easymotion
" map z/ <Plug>(incsearch-easymotion-/)
" map z? <Plug>(incsearch-easymotion-?)
" map zg/ <Plug>(incsearch-easymotion-stay)

